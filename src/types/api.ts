// let's imagine this file is autogenerated from the backend
// ideally, we want to keep these api related types in sync
// with the backend instead of manually writing them out

export type BaseEntity = {
  id: string;
  createdAt: number;
};

export type Entity<T> = {
  [K in keyof T]: T[K];
} & BaseEntity;

export type Course = Entity<{
  title: string;
  duration: string;
  lessons: number;
  enrolled: number;
  language: string;
}>;

export type Topic = Entity<{
  courseId: string;
  topicId: string;
  title: string;
  video:string;
  poster:string;
}>;

export type ChapterTopic ={
  id: string;
  type: 'video' | 'file' | 'quiz';
  title: string;
  completed: boolean;
  locked: boolean;
  questionsCount?: number;
  totalTimeString?: string;
  totalTimeSeconds?: number;
}

export type Chapter = Entity<{
  title: string;
  description: string;
  chapterTopics: ChapterTopic[];
}>;

export interface CourseTopics
{
  progress: number;
  topics: Chapter[];
}

export type TopicFile = Entity<{  
  courseId: string;
  title: string;
  file:string;
}>;

export type QuizQuestion = {
  id: string;
  question: string;
  options: string[];
};

export type Quiz = Entity<{
  courseId: string;
  title: string;
  totalTimeSeconds: number;
  questions: QuizQuestion[];
}>;

export type QuizAnswerInput = {
  question_id: string;
  option_ids: string[];
};

export type SubmitQuizInput = {
  courseId: string;
  quizId: string;
  answers: QuizAnswerInput[];
};

export type QuizResultItem = {
  questionId: string;
  correctOption: string;
  userOption?: string;
  isCorrect: boolean;
};

export type SubmitQuizResponse = {
  data: {
    score: number;
    totalQuestions: number;
    percentage: number;
    results: QuizResultItem[];
  };
};

export type CommentUser = {
  id: number;
  username: string;
  fullName: string;
};

export type Comment = {
  id: number;
  body: string;
  postId: number;
  likes: number;
  user: CommentUser;
};

export type CommentsResponse = {
  comments: Comment[];
  total: number;
  skip: number;
  limit: number;
};

export type CreateCommentInput = {
  courseId: string;
  userName: string;
  content: string;
};

export type LeaderboardUser = {
  id: string;
  name: string;
  progress: number;
  rank: number;
  avatar?: string;
};

export type LeaderboardResponse = {
  data: {
    users: LeaderboardUser[];
    currentUser?: LeaderboardUser;
    message?: string;
  };
};